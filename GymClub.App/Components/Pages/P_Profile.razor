@page "/profile"
@layout MainLayout
@rendermode RenderMode.InteractiveServer
@using GymClub.App.Components.Layout
@using GymClub.Domain.Features.User.Profile
@inject AuthenticationStateProvider _authStateProvider
@inject ProfileService _profileService

@if(model is not null){
    <div class="card rounded-4">
        <div class="card-body p-4">
            <div class="row">
                <div class="col-md-2">
                    <div class="position-relative mb-5 text-center">
                        <div>
                            <img src="@_imagePathDefault" class="img-fluid rounded-circle p-1 bg-grd-danger shadow" style="width: 170px;height: 170px;object-fit: cover;" width="170" height="170" alt="">
                        </div>
                    </div>
                </div>
                <div class="col-md-10">
                    <div class="full-info mt-4">
                        <div class="info-list d-flex flex-column gap-3">
                            <div class="info-list-item d-flex align-items-center gap-3">
                                <i class="fa-regular fa-circle-user"></i>
                                <p class="mb-0">Full Name: @model.UserName</p>
                            </div>
                            <div class="info-list-item d-flex align-items-center gap-3">
                                <i class="fa-solid fa-mobile"></i>
                                <p class="mb-0">Phone: @model.PhoneNo</p>
                            </div>
                            <div class="info-list-item d-flex align-items-center gap-3">
                                <i class="fa-solid fa-mobile"></i>
                                <p class="mb-0">Gender: @model.Gender</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UserSessionModel _userSession = new();
    private string _imagePathDefault = "images/user.png";
    private ProfileRequestModel _reqModel = new();
    private RegistrationResponseModel model = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _injectService.EnableLoading();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)_authStateProvider;
            var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
            _userSession = await customAuthStateProvider.GetUserData();
            _reqModel.UserId = _userSession.UserId;

            await Profile();

            await _injectService.DisableLoading();
            StateHasChanged();
        }
    }

    private async Task Profile()
    {
        model = await _profileService.Profile(_reqModel);
        if (model.Response.IsError)
        {
            await _injectService.ShowErrorMessage(model.Response.Message);
            return;
        }
    }
}